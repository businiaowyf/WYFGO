// Code generated by protoc-gen-go.
// source: HT_favorite_head.proto
// DO NOT EDIT!

package ht_favorite

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 根据不同的cmd_type来使用不同的body
type CMD_TYPE int32

const (
	CMD_TYPE_CMD_ADD         CMD_TYPE = 1
	CMD_TYPE_CMD_DEL         CMD_TYPE = 2
	CMD_TYPE_CMD_GET         CMD_TYPE = 3
	CMD_TYPE_CMD_UPDATE_TAG  CMD_TYPE = 4
	CMD_TYPE_CMD_SEARCH_TAG  CMD_TYPE = 5
	CMD_TYPE_CMD_SEARCH_TEXT CMD_TYPE = 6
)

var CMD_TYPE_name = map[int32]string{
	1: "CMD_ADD",
	2: "CMD_DEL",
	3: "CMD_GET",
	4: "CMD_UPDATE_TAG",
	5: "CMD_SEARCH_TAG",
	6: "CMD_SEARCH_TEXT",
}
var CMD_TYPE_value = map[string]int32{
	"CMD_ADD":         1,
	"CMD_DEL":         2,
	"CMD_GET":         3,
	"CMD_UPDATE_TAG":  4,
	"CMD_SEARCH_TAG":  5,
	"CMD_SEARCH_TEXT": 6,
}

func (x CMD_TYPE) Enum() *CMD_TYPE {
	p := new(CMD_TYPE)
	*p = x
	return p
}
func (x CMD_TYPE) String() string {
	return proto.EnumName(CMD_TYPE_name, int32(x))
}
func (x *CMD_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_TYPE_value, data, "CMD_TYPE")
	if err != nil {
		return err
	}
	*x = CMD_TYPE(value)
	return nil
}
func (CMD_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type SYS_TYPE int32

const (
	SYS_TYPE_SYS_LUA       SYS_TYPE = 1
	SYS_TYPE_SYS_TYPE_TOOL SYS_TYPE = 20
)

var SYS_TYPE_name = map[int32]string{
	1:  "SYS_LUA",
	20: "SYS_TYPE_TOOL",
}
var SYS_TYPE_value = map[string]int32{
	"SYS_LUA":       1,
	"SYS_TYPE_TOOL": 20,
}

func (x SYS_TYPE) Enum() *SYS_TYPE {
	p := new(SYS_TYPE)
	*p = x
	return p
}
func (x SYS_TYPE) String() string {
	return proto.EnumName(SYS_TYPE_name, int32(x))
}
func (x *SYS_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SYS_TYPE_value, data, "SYS_TYPE")
	if err != nil {
		return err
	}
	*x = SYS_TYPE(value)
	return nil
}
func (SYS_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type RET_CODE int32

const (
	RET_CODE_RET_SUCCESS          RET_CODE = 0
	RET_CODE_RET_REPEAT_ADD       RET_CODE = 100
	RET_CODE_RET_NOT_CHANGE       RET_CODE = 101
	RET_CODE_RET_NO_MORE          RET_CODE = 102
	RET_CODE_RET_PB_ERR           RET_CODE = 500
	RET_CODE_RET_INTERNAL_ERR     RET_CODE = 501
	RET_CODE_RET_SESS_TIMEOUT_ERR RET_CODE = 502
	RET_CODE_RET_INPUT_PARAM_ERR  RET_CODE = 503
	RET_CODE_RET_DB_ERR           RET_CODE = 504
	RET_CODE_RET_NOT_EXIST        RET_CODE = 505
)

var RET_CODE_name = map[int32]string{
	0:   "RET_SUCCESS",
	100: "RET_REPEAT_ADD",
	101: "RET_NOT_CHANGE",
	102: "RET_NO_MORE",
	500: "RET_PB_ERR",
	501: "RET_INTERNAL_ERR",
	502: "RET_SESS_TIMEOUT_ERR",
	503: "RET_INPUT_PARAM_ERR",
	504: "RET_DB_ERR",
	505: "RET_NOT_EXIST",
}
var RET_CODE_value = map[string]int32{
	"RET_SUCCESS":          0,
	"RET_REPEAT_ADD":       100,
	"RET_NOT_CHANGE":       101,
	"RET_NO_MORE":          102,
	"RET_PB_ERR":           500,
	"RET_INTERNAL_ERR":     501,
	"RET_SESS_TIMEOUT_ERR": 502,
	"RET_INPUT_PARAM_ERR":  503,
	"RET_DB_ERR":           504,
	"RET_NOT_EXIST":        505,
}

func (x RET_CODE) Enum() *RET_CODE {
	p := new(RET_CODE)
	*p = x
	return p
}
func (x RET_CODE) String() string {
	return proto.EnumName(RET_CODE_name, int32(x))
}
func (x *RET_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RET_CODE_value, data, "RET_CODE")
	if err != nil {
		return err
	}
	*x = RET_CODE(value)
	return nil
}
func (RET_CODE) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type ReqBody struct {
	AddReqbody        *AddReqBody        `protobuf:"bytes,1,opt,name=add_reqbody" json:"add_reqbody,omitempty"`
	DelReqbody        *DelReqBody        `protobuf:"bytes,2,opt,name=del_reqbody" json:"del_reqbody,omitempty"`
	GetReqbody        *GetReqBody        `protobuf:"bytes,3,opt,name=get_reqbody" json:"get_reqbody,omitempty"`
	UpdateTagReqbody  *UpdateTagReqBody  `protobuf:"bytes,4,opt,name=update_tag_reqbody" json:"update_tag_reqbody,omitempty"`
	SearchTagReqbody  *SearchTagReqBody  `protobuf:"bytes,5,opt,name=search_tag_reqbody" json:"search_tag_reqbody,omitempty"`
	SearchTextReqbody *SearchTextReqBody `protobuf:"bytes,6,opt,name=search_text_reqbody" json:"search_text_reqbody,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *ReqBody) Reset()                    { *m = ReqBody{} }
func (m *ReqBody) String() string            { return proto.CompactTextString(m) }
func (*ReqBody) ProtoMessage()               {}
func (*ReqBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ReqBody) GetAddReqbody() *AddReqBody {
	if m != nil {
		return m.AddReqbody
	}
	return nil
}

func (m *ReqBody) GetDelReqbody() *DelReqBody {
	if m != nil {
		return m.DelReqbody
	}
	return nil
}

func (m *ReqBody) GetGetReqbody() *GetReqBody {
	if m != nil {
		return m.GetReqbody
	}
	return nil
}

func (m *ReqBody) GetUpdateTagReqbody() *UpdateTagReqBody {
	if m != nil {
		return m.UpdateTagReqbody
	}
	return nil
}

func (m *ReqBody) GetSearchTagReqbody() *SearchTagReqBody {
	if m != nil {
		return m.SearchTagReqbody
	}
	return nil
}

func (m *ReqBody) GetSearchTextReqbody() *SearchTextReqBody {
	if m != nil {
		return m.SearchTextReqbody
	}
	return nil
}

type RspBody struct {
	AddRspbody        *AddRspBody        `protobuf:"bytes,1,opt,name=add_rspbody" json:"add_rspbody,omitempty"`
	DelRspbody        *DelRspBody        `protobuf:"bytes,2,opt,name=del_rspbody" json:"del_rspbody,omitempty"`
	GetRspbody        *GetRspBody        `protobuf:"bytes,3,opt,name=get_rspbody" json:"get_rspbody,omitempty"`
	UpdateTagRspbody  *UpdateTagRspBody  `protobuf:"bytes,4,opt,name=update_tag_rspbody" json:"update_tag_rspbody,omitempty"`
	SearchTagRspbody  *SearchTagRspBody  `protobuf:"bytes,5,opt,name=search_tag_rspbody" json:"search_tag_rspbody,omitempty"`
	SearchTextRspbody *SearchTextRspBody `protobuf:"bytes,6,opt,name=search_text_rspbody" json:"search_text_rspbody,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *RspBody) Reset()                    { *m = RspBody{} }
func (m *RspBody) String() string            { return proto.CompactTextString(m) }
func (*RspBody) ProtoMessage()               {}
func (*RspBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RspBody) GetAddRspbody() *AddRspBody {
	if m != nil {
		return m.AddRspbody
	}
	return nil
}

func (m *RspBody) GetDelRspbody() *DelRspBody {
	if m != nil {
		return m.DelRspbody
	}
	return nil
}

func (m *RspBody) GetGetRspbody() *GetRspBody {
	if m != nil {
		return m.GetRspbody
	}
	return nil
}

func (m *RspBody) GetUpdateTagRspbody() *UpdateTagRspBody {
	if m != nil {
		return m.UpdateTagRspbody
	}
	return nil
}

func (m *RspBody) GetSearchTagRspbody() *SearchTagRspBody {
	if m != nil {
		return m.SearchTagRspbody
	}
	return nil
}

func (m *RspBody) GetSearchTextRspbody() *SearchTextRspBody {
	if m != nil {
		return m.SearchTextRspbody
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqBody)(nil), "ht.favorite.ReqBody")
	proto.RegisterType((*RspBody)(nil), "ht.favorite.RspBody")
	proto.RegisterEnum("ht.favorite.CMD_TYPE", CMD_TYPE_name, CMD_TYPE_value)
	proto.RegisterEnum("ht.favorite.SYS_TYPE", SYS_TYPE_name, SYS_TYPE_value)
	proto.RegisterEnum("ht.favorite.RET_CODE", RET_CODE_name, RET_CODE_value)
}

func init() { proto.RegisterFile("HT_favorite_head.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x86, 0x69, 0xb3, 0x8f, 0xea, 0x54, 0x63, 0xc6, 0x1d, 0x30, 0x90, 0x40, 0x88, 0x2b, 0x54,
	0xa1, 0x5e, 0x70, 0x87, 0xb8, 0xf2, 0x92, 0xa3, 0xb6, 0x52, 0x9b, 0x44, 0x8e, 0x23, 0x6d, 0x57,
	0x56, 0xc0, 0x5e, 0x8b, 0x34, 0xd1, 0xae, 0x0d, 0x08, 0xfe, 0x20, 0x3f, 0x81, 0x5f, 0xc2, 0xe7,
	0x1d, 0xb1, 0x13, 0xb7, 0xe9, 0xd4, 0x75, 0x77, 0xf6, 0xeb, 0xe7, 0xf1, 0x39, 0x7a, 0xe1, 0xd1,
	0x40, 0xc8, 0xcb, 0xec, 0xcb, 0x6c, 0xf1, 0x31, 0xd7, 0x72, 0xaa, 0x33, 0xd5, 0x9b, 0x2f, 0x66,
	0xf9, 0x8c, 0xb6, 0xa7, 0x79, 0xcf, 0xe5, 0x4f, 0x37, 0xa0, 0xf7, 0x33, 0xf5, 0xad, 0x84, 0x5e,
	0x7e, 0x6f, 0xc2, 0x21, 0xd7, 0xd7, 0x67, 0x45, 0x42, 0x5f, 0x43, 0x3b, 0x53, 0x4a, 0x2e, 0xf4,
	0xb5, 0x01, 0x4e, 0x1b, 0x2f, 0x1a, 0xaf, 0xda, 0x6f, 0x1e, 0xf7, 0x6a, 0xdf, 0xf4, 0x98, 0x52,
	0x35, 0x5a, 0xe9, 0xab, 0x15, 0xdd, 0xdc, 0x42, 0x07, 0xfa, 0xaa, 0x46, 0x4f, 0x74, 0xbe, 0xa2,
	0xbd, 0x2d, 0x74, 0x5f, 0xe7, 0x8e, 0x7e, 0x0b, 0xf4, 0xf3, 0x5c, 0x65, 0xc5, 0xaa, 0x79, 0x36,
	0x59, 0x49, 0x7b, 0x56, 0x7a, 0xb6, 0x21, 0xa5, 0x16, 0x13, 0xd9, 0xa4, 0xa6, 0x2e, 0x75, 0xb6,
	0xf8, 0x30, 0xdd, 0x50, 0xf7, 0xb7, 0xa8, 0x89, 0xc5, 0x6a, 0xea, 0x3b, 0xe8, 0x38, 0x55, 0x7f,
	0x5d, 0xef, 0x7a, 0x60, 0xdd, 0xe7, 0xdb, 0xdc, 0x02, 0xab, 0xe4, 0xb2, 0xc8, 0xe5, 0x7c, 0xa3,
	0xc8, 0xe5, 0x7c, 0x67, 0x91, 0x6b, 0xda, 0x16, 0x59, 0xd1, 0xb7, 0x15, 0xb9, 0xa6, 0x6d, 0x91,
	0x15, 0x7d, 0x5b, 0x91, 0x15, 0x7d, 0xa3, 0xc8, 0x4a, 0xda, 0x5d, 0xe4, 0x5a, 0xad, 0x17, 0x59,
	0xa9, 0xbb, 0x8b, 0xac, 0xd4, 0x9b, 0x45, 0x56, 0xee, 0x1d, 0x45, 0x96, 0x72, 0xf7, 0x13, 0xb4,
	0xfc, 0x71, 0x20, 0xc5, 0x45, 0x8c, 0xb4, 0x0d, 0x87, 0xe6, 0xcc, 0x82, 0x80, 0x34, 0xdc, 0x25,
	0xc0, 0x11, 0x69, 0xba, 0x4b, 0x1f, 0x05, 0xf1, 0x28, 0x85, 0xfb, 0xe6, 0x92, 0xc6, 0x01, 0x13,
	0x28, 0x05, 0xeb, 0x93, 0x3d, 0x97, 0x25, 0xc8, 0xb8, 0x3f, 0xb0, 0xd9, 0x3e, 0xed, 0xc0, 0x71,
	0x3d, 0xc3, 0x73, 0x41, 0x0e, 0xba, 0x5d, 0x68, 0x25, 0x17, 0xc9, 0x6a, 0x9e, 0x39, 0x8f, 0x52,
	0x56, 0xcc, 0x7b, 0x00, 0x47, 0xee, 0x41, 0x8a, 0x28, 0x1a, 0x91, 0x93, 0xee, 0x8f, 0x06, 0xb4,
	0x38, 0x0a, 0xe9, 0x47, 0x01, 0xd2, 0x63, 0x68, 0x9b, 0x73, 0x92, 0xfa, 0x3e, 0x26, 0x09, 0xb9,
	0x67, 0x46, 0x9a, 0x80, 0x63, 0x8c, 0x4c, 0xd8, 0xa5, 0x95, 0xcb, 0xc2, 0xa8, 0x90, 0x06, 0x2c,
	0xec, 0x23, 0xd1, 0x4e, 0x0c, 0x23, 0x39, 0x8e, 0x38, 0x92, 0xcb, 0x22, 0x00, 0x13, 0xc4, 0x67,
	0x12, 0x39, 0x27, 0x3f, 0x3d, 0xfa, 0x10, 0x88, 0x09, 0x86, 0xa1, 0x40, 0x1e, 0xb2, 0x91, 0x8d,
	0x7f, 0x79, 0xf4, 0x09, 0x9c, 0xd8, 0x89, 0xc5, 0x38, 0x29, 0x86, 0x63, 0x8c, 0x52, 0x61, 0x9f,
	0x7e, 0x7b, 0xf4, 0x14, 0x3a, 0xa5, 0x11, 0x17, 0x59, 0xcc, 0x38, 0x1b, 0xdb, 0x97, 0x3f, 0x9e,
	0xfb, 0x3c, 0x28, 0x3f, 0xff, 0x6b, 0xda, 0x3a, 0x72, 0x2b, 0xe1, 0xf9, 0x30, 0x11, 0xe4, 0x9f,
	0xf7, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x02, 0xb9, 0xc9, 0x6a, 0x44, 0x04, 0x00, 0x00,
}
